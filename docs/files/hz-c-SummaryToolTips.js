NDSummary.OnToolTipsLoaded("File:hz.c",{12:"<div class=\"NDToolTip TInformation LC\"><div class=\"TTSummary\">This file is licensed under MIT.</div></div>",13:"<div class=\"NDToolTip TStruct LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype13\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">hz_bump_allocator_t</div></div></div><div class=\"TTSummary\">A bump allocator, meant to be used on a temporary stack buffer.&nbsp; The blocks are allocated and stored on the multiple of their size rounded to a power of two.&nbsp; Another name for this is &quot;monotonic allocator&quot;.</div></div>",1:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype1\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">HZ_INLINE <span class=\"SHKeyword\">void</span> hz_bump_allocator_init(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">hz_bump_allocator_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">void</span>&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PType first\">size_t&nbsp;</td><td></td><td class=\"PName last\">size</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Initializes a bump allocator on a block of memory.</div></div>",15:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype15\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">HZ_INLINE <span class=\"SHKeyword\">void</span> * hz_bump_allocator_alloc(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">hz_bump_allocator_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\">size_t&nbsp;</td><td></td><td class=\"PName last\">size</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Allocates new block of memory, and pushes pointer forward.&nbsp; Blocks are allocated on the multiple of the size rounded up to the next power of two.</div></div>",16:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype16\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">HZ_INLINE <span class=\"SHKeyword\">void</span> hz_bump_allocator_free(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">hz_bump_allocator_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">a,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">void</span>&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">p</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Frees a previously allocated block. (currently a no-op)</div></div>",17:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype17\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">HZ_INLINE <span class=\"SHKeyword\">void</span> hz_bump_allocator_release(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">hz_bump_allocator_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">a</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Releases all resources held by the allocator. (currently a no-op)</div></div>",6:"<div class=\"NDToolTip TStruct LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype6\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">hz_stream_t</div></div></div><div class=\"TTSummary\">A struct to store a buffer.&nbsp; This is also used to handle reading bytes sequentially.&nbsp; Unpacks in network-order (big endian).</div></div>",25:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype25\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">HZ_INLINE hz_stream_t hz_stream_create(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">uint8_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PType first\">size_t&nbsp;</td><td></td><td class=\"PName last\">size</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Creates a byte stream, holds data and a bump pointer allowing seeking, unpacking various primitives from memory.</div></div>",5:"<div class=\"NDToolTip TStruct LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype5\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">hz_sequence_node_cache_t</div></div></div><div class=\"TTSummary\">Sequence of pointers to nodes which may have a gap between useful for when checking sub-sequences with glyph class skip flags when applying lookups as a form of cache. i.e. it\'s used in contextual substitutions when comparing a subsection of a sequence and caching those nodes, so that later can easily move to specific subsections of the sequence.</div></div>",21:"<div class=\"NDToolTip TStruct LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype21\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">hz_shape_call_cache_t</div></div></div><div class=\"TTSummary\">Holds the cache of all OpenType lookups required in a call to &lt;hz_shape&gt;.</div></div>",39:"<div class=\"NDToolTip TEnumeration LC\"><div class=\"TTSummary\">https://&#8203;docs&#8203;.microsoft&#8203;.com&#8203;/en-us&#8203;/typography&#8203;/opentype&#8203;/spec&#8203;/cmap&#8203;#platform-ids</div></div>",41:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype41\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">HZ_STATIC <span class=\"SHKeyword\">void</span> hz_shape_impl_naive(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">hz_font_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">font,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">hz_sequence_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">sequence,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">hz_feature_t&nbsp;</td><td class=\"PSymbols\">*</td><td class=\"PName last\">features,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">unsigned</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td></td><td class=\"PName last\">num_features</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Naive simple (slow) implementation of &lt;hz_shape&gt;.&nbsp; This parses the OpenType lookups progressively from memory.</div></div>"});